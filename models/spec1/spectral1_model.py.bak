# imports
import tables
import numpy as np
from misc.utils import interpolate_xy, lookup_xy, get_mu_syn, get_sigma_syn

# try to import numba
# or define dummy decorator
try:
    import numba
    from numba import njit
except:
    def njit(func):
        return func

@njit
def sim_spec1(mu_ext, sigma_ext, map1_Vmean, map_r_inf, mu_range,
              sigma_range, map_lambda_1, tauw, dt, steps, C,a ,b, EW,
              s0, r0,w0, rec,K,J,delay_type,n_d,taud):

    # optimizations
    dt_tauw = dt/tauw
    b_tauw = b*tauw

    # initialize real arrays
    r   = np.zeros(steps+1)
    r_d = np.zeros(steps+1)
    s   = np.zeros(steps+1)
    wm  = np.zeros(steps+1)
    lambda_1_real = np.zeros(steps+1)

    # write initial condition into array
    r[0] = r0
    s[0] = s0
    wm[0] = w0

    for i in range(steps):
        #compute mu_syn/sigma_syn from
        if rec:
            mu_syn = get_mu_syn(K, J, mu_ext,delay_type,i,r,r_d,n_d,taud,dt)
            sigma_syn = get_sigma_syn(K, J, sigma_ext,delay_type,i,r,r_d,n_d,taud,dt)
        else:
            mu_syn = mu_ext[i]
            sigma_syn = sigma_ext[i]
        #effective mu
        mu_eff = mu_syn - wm[i] / C

        # interpolate
        weights = interpolate_xy(mu_eff, sigma_syn, mu_range, sigma_range)
        # lookup
        Vm_inf = lookup_xy(map1_Vmean, weights)
        r_inf =  lookup_xy(map_r_inf, weights)
        lambda_1 = lookup_xy(map_lambda_1, weights)
        lambda_1_real[i] = lambda_1.real # save real part of lambda(t)

        # split lambda in real and imaginary part
        Re = lambda_1.real
        Im = lambda_1.imag
        r_diff = r[i] - r_inf

        # integration step
        # rectify r (ensures nonnegative rate)
        r_prelim = r[i] + dt * (Re * r_diff - Im * s[i])
        r[i+1] = r_prelim if r_prelim > 0. else 0.
        # r[i+1] = r[i] + dt * (Re * r_diff - Im * s[i])
        s[i+1] = s[i] + dt * (Im * r_diff + Re * s[i])
        wm[i+1] = wm[i] + dt_tauw * (a[i] * (Vm_inf - EW) - wm[i] + b_tauw[i] * r[i])

    return (r*1000, wm, lambda_1_real)

def run_spec1(ext_signal, params, filename_h5, 
              rec_vars = ['wm'], rec = False, FS = False):

    if FS:
        raise NotImplementedError('FS-effects not implemented for spectral1 model!')

    # print('running spec1')

    # runtime parameters
    dt = params['uni_dt']
    runtime = params['runtime']
    steps = int(runtime/dt)
    t = np.linspace(0., runtime, steps+1)

    #external signal
    mu_ext = ext_signal[0]
    sigma_ext = ext_signal[1]

    # adaptation params
    a = params['a']
    b = params['b']
    tauw = params['tauw']
    Ew = params['Ew']
    have_adap = True if (a.any() or b.any()) else False

    # coupling parameters
    K = params['K']
    J = params['J']
    taud = params['taud']
    ndt = int(params['const_delay']/dt)
    delay_type = params['delay_type']

    # membrane capacitance
    C = params['C']

    # load quantities from hdf5-file
    h5file           =  tables.open_file(filename_h5, mode = 'r')
    sig_tab        =  h5file.root.sigma.read()
    mu_tab         =  h5file.root.mu.read()
    lambda_1       =  h5file.root.lambda_1.read()
    map_r          =  h5file.root.r_inf.read()
    map_Vmean      =  h5file.root.V_mean_inf.read()
    h5file.close()

    #initial values
    s0 = 0.
    r0 = 0.
    w0 = params['wm_init'] if have_adap else 0.

    # run simulation loop
    results = sim_spec1(mu_ext, sigma_ext,map_Vmean,map_r,mu_tab,sig_tab,
                        lambda_1,tauw, dt, steps,C, a,b,Ew, s0, r0,w0,
                        rec, K, J, delay_type, ndt, taud)

    #store results in dictionary which is returned
    results_dict = dict()
    results_dict['r'] = results[0]
    results_dict['t'] = t
    if 'wm' in rec_vars: results_dict['wm'] = results[1]
    if 'lambda_1_real' in rec_vars: results_dict['lambda_1_real'] = results[2]
    #put more
    # if 'Vm' in record_variables:
    # if 'XX' in record_variables:
    # if 'XX' in record_variables:
    return results_dict

